import{_ as d,c as e,a2 as o,o as r}from"./chunks/framework.BLTIpkzl.js";const u=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"python/python-reg-exp.md","filePath":"python/python-reg-exp.md"}'),a={name:"python/python-reg-exp.md"};function c(i,t,n,l,s,h){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><h2 id="什么是正则表达式" tabindex="-1">什么是正则表达式？ <a class="header-anchor" href="#什么是正则表达式" aria-label="Permalink to &quot;什么是正则表达式？&quot;">​</a></h2><p><code>正则表达式</code> （Regular Expression 即 RegExp），是计算机科学的一个概念，它通常被用来搜索、替换那些符合某个规则的文本。</p><p>它可以用来匹配 <strong>特殊字符串</strong> 或 <strong>有特殊搭配原则</strong> 的字符串</p><p>在 Python 中通过内置的 <code>re</code> 模块提供对正则表达式的支持。</p><p>在学习 <code>re</code> 模块的使用之前，先要了解几个关于 <code>正则表达式</code> 的知识：转义符、元字符</p><h2 id="转义符" tabindex="-1">转义符 <a class="header-anchor" href="#转义符" aria-label="Permalink to &quot;转义符&quot;">​</a></h2><p>转义符用于标识特殊字符，通常以反斜杠 <code>\\</code> 开头，使得某些字符具有特殊含义，或解除它们的特殊含义。</p><p>例子：</p><table tabindex="0"><thead><tr><th>转义符的使用</th><th>说明</th></tr></thead><tbody><tr><td><code>\\n</code></td><td>换行符</td></tr><tr><td><code>\\t</code></td><td>制表符（Tab）</td></tr><tr><td><code>\\\\</code></td><td>反斜杠</td></tr><tr><td><code>\\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\r</code></td><td>回车符</td></tr><tr><td><code>\\b</code></td><td>退格符</td></tr><tr><td><code>\\f</code></td><td>换页符</td></tr><tr><td><code>&quot;asd\\&quot;dsa&quot;</code></td><td>在字符串中加入双引号</td></tr></tbody></table><h2 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h2><p><code>元字符</code> 是 <strong>正则表达式</strong> 中具有特殊含义的字符，通常用于匹配特定的模式。</p><table tabindex="0"><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符（<code>\\n</code>、<code>\\r</code>）之外的任何单个字符</td></tr><tr><td><code>^</code></td><td>匹配字符串的开头</td></tr><tr><td><code>$</code></td><td>匹配字符串的结尾</td></tr><tr><td><code>*</code></td><td>匹配前一个字符 0 次 或 多次</td></tr><tr><td><code>+</code></td><td>匹配前一个字符 1 次 或 多次</td></tr><tr><td><code>?</code></td><td>匹配前一个字符 0 次 或 1 次</td></tr><tr><td><code>{n}</code></td><td>匹配前一个字符恰好 n 次</td></tr><tr><td><code>{n,}</code></td><td>匹配前一个字符 至少 n 次</td></tr><tr><td><code>{n, m}</code></td><td>匹配前一个字符 至少 n 次，至多 m 次</td></tr><tr><td><code>\\d</code></td><td>匹配数字（等价于 <code>[0-9]</code>）</td></tr><tr><td><code>\\D</code></td><td>匹配非数字</td></tr><tr><td><code>\\w</code></td><td>匹配字母、数字或下划线（等价于 <code>[a-zA-Z0-9_]</code>）</td></tr><tr><td><code>\\W</code></td><td>匹配非字母、数字或下划线</td></tr><tr><td><code>\\s</code></td><td>匹配空白字符串（包括空格、制表符、换行符等）</td></tr><tr><td><code>\\S</code></td><td>匹配非空白字符串</td></tr><tr><td><code>[]</code></td><td>匹配括号内的任意一个字符</td></tr><tr><td><code>()</code></td><td>组，表示一个子模式，可以用于提取匹配内容</td></tr></tbody></table><h2 id="re-模块" tabindex="-1"><code>re</code> 模块 <a class="header-anchor" href="#re-模块" aria-label="Permalink to &quot;`re` 模块&quot;">​</a></h2><p>在使用 <code>re</code> 模块时需要先进行引用。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span></code></pre></div><h3 id="常用函数" tabindex="-1">常用函数 <a class="header-anchor" href="#常用函数" aria-label="Permalink to &quot;常用函数&quot;">​</a></h3><ul><li><code>re.match(pattern, string)</code>：从字符串开头匹配模式</li><li><code>re.search(pattern, string)</code>：从字符串中搜索模式</li><li><code>re.findall(pattern, string)</code>：返回所有匹配的子串</li><li><code>re.sub(pattern, repl， string)</code>：替换匹配的子串</li><li><code>re.split(pattern, string)</code>：根据模式分割字符串</li></ul><h3 id="匹配对象" tabindex="-1">匹配对象 <a class="header-anchor" href="#匹配对象" aria-label="Permalink to &quot;匹配对象&quot;">​</a></h3><p>如果匹配成功，<code>match()</code>、<code>search()</code> 函数会返回一个匹配对象（如果没匹配到返回 <code>None</code>），包含以下方法：</p><ul><li><code>group()</code>：返回匹配的子串</li><li><code>start()</code>：返回匹配的子串的起始位置</li><li><code>end()</code>：返回匹配的子串的结束位置</li><li><code>span()</code>：返回匹配的子串的起始和结束位置</li></ul>',21)]))}const b=d(a,[["render",c]]);export{u as __pageData,b as default};
