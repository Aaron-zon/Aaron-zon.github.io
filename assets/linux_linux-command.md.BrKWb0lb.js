import{ax as i,A as e,aQ as a,z as o}from"./chunks/framework.BWRXlwpK.js";const t="/assets/image.DuFZ5m7R.png",m=JSON.parse('{"title":"Linux 基本命令","description":"","frontmatter":{},"headers":[],"relativePath":"linux/linux-command.md","filePath":"linux/linux-command.md"}'),s={name:"linux/linux-command.md"};function d(c,l,r,n,h,u){return o(),e("div",null,l[0]||(l[0]=[a('<h1 id="linux-基本命令" tabindex="-1">Linux 基本命令 <a class="header-anchor" href="#linux-基本命令" aria-label="Permalink to &quot;Linux 基本命令&quot;">​</a></h1><h2 id="普通命令" tabindex="-1">普通命令 <a class="header-anchor" href="#普通命令" aria-label="Permalink to &quot;普通命令&quot;">​</a></h2><ul><li>cd：切换目录</li><li>pwd：显示当前工作目录绝对路径</li><li>ll：查看当前目录下的文件，不包括隐藏文件</li><li>ls -al：查看当前目录的文件，包括隐藏文件</li><li>mkdir：创建目录，只能在存在的路径下进行创建</li><li>mkdir -p：如果，如果上级路径不存在将上级目录也一起创建</li><li>rmdir：删除目录，只能删除目录中没有文件的目录</li><li>touch：创建文件</li><li>cp：复制文件 目标位置 (可以重命名)</li><li>cp -r：递归赋值，多级目录</li><li>mv：移动文件 目标位置 (可以重命名)</li><li>rm：删除文件</li><li>rm -rf：删除路径以及路径下所有文件</li><li>tail -行数 文件名：根据行数查找文件中最后的那几行，如果不写行数默认为最后10行</li><li>tail -F：实时刷新</li><li>grep：搜索内容 <ul><li>ll |grep &quot;ssl&quot;：查找文件名以ssl开头的文件</li></ul></li><li>tail -F 文件名 |grep &quot;内容&quot;：查找文件中以内容开头的行 <ul><li>tail -F b.txt |grep &quot;A:&quot;： 查看文件b.txt中以A:开头的行</li></ul></li><li>cat：查看文件（全文），也可以配合grep使用，在cat中可以用多次grep <ul><li>cat b.txt |grep &quot;A:&quot; |grep &quot;3&quot;</li></ul></li><li>less：查看文件（分页）上下键翻页</li><li>more：查看文件</li><li>history：查看已经执行过的历史命令</li><li>echo 内容 &gt; 文件名：将内容写入文件</li><li>chmod 权限 文件名：修改文件权限 <ul><li>chmod 777 文件名：修改文件权限为777</li></ul></li></ul><h2 id="网络命令" tabindex="-1">网络命令 <a class="header-anchor" href="#网络命令" aria-label="Permalink to &quot;网络命令&quot;">​</a></h2><ul><li>ping 【host】：确认通信状况</li><li>telnet：ip端口，查看端口是否占用（如果没有此命令可以执行 【yum install telent】进行下载）</li><li>wget 【file】：下载文件</li><li>hostname：查看主机名</li><li>ip route show：查看网关</li></ul><h2 id="系统信息命令" tabindex="-1">系统信息命令 <a class="header-anchor" href="#系统信息命令" aria-label="Permalink to &quot;系统信息命令&quot;">​</a></h2><ul><li>date：查看当前系统时间</li><li>date -s：修改时间</li><li>w：显示登录用户</li><li>uname -a：查看系统内核</li><li>cat /proc/cpuinfo：查看cpu信息</li></ul><h2 id="常用的其他命令" tabindex="-1">常用的其他命令 <a class="header-anchor" href="#常用的其他命令" aria-label="Permalink to &quot;常用的其他命令&quot;">​</a></h2><ul><li>lscpu：查看当前机器cpu信息</li><li>df：查看磁盘空间（ -h， -i）</li><li>ps aux：查看系统上启动的服务</li><li>ps aux lgrep “服务”：查看此服务是否启用（如果启用这会有多条，没启用会有1条或0条）、</li><li>top：查看资源占用情况，类似windows任务管理器 <ul><li>主要有以下几个数据需要观察</li><li>CPU：cpu使用率</li><li>MEM：内存使用率</li></ul></li><li>systemctl disable firewalld：取消防火墙服务，关闭防火墙后必须重启，否则不生效</li><li>curl 网址：向目标发送http请求 <ul><li>-i：获取响应头</li></ul></li><li>history：查看之前使用过的命令</li><li>whereis：查看命令在Linux系统中的位置 <ul><li>whereis cd：这个就是查询cd命令在Linux中的位置 -echo $PATH：输出所有环境变量所处的位置</li></ul></li><li>find -name 文件名：根据文件名查询当前文件夹下的文件位置（对文件夹递归）</li></ul><h2 id="压缩解压" tabindex="-1">压缩解压 <a class="header-anchor" href="#压缩解压" aria-label="Permalink to &quot;压缩解压&quot;">​</a></h2><ul><li><p>tar</p><ul><li>tar -cvf 【压缩后文件名】.tar 【目标文件位置】：压缩文件</li><li>tar -xvf 【解压文件名】：解压文件</li><li>tar -zcvf 【压缩后文件名】.tar 【目标文件位置】：压缩文件</li><li>tar -xzvf 【解压文件名】：解压gzip文件 <img src="'+t+`" alt="alt text"></li></ul></li><li><p>zip：前提 安装zip和unzip</p><ul><li>zip -r 【压缩后文件名】.zip 【目标文件位置】：压缩目标路径下文件</li><li>unzip 【压缩文件名】：解压文件</li></ul></li></ul><h2 id="vi" tabindex="-1">vi <a class="header-anchor" href="#vi" aria-label="Permalink to &quot;vi&quot;">​</a></h2><ul><li>vi + 文件名：创建文件并进入（此时是不可输入的）</li><li><code>i</code>：进入输入模式（按小键盘的数字也会进入输入模式） <ul><li><code>esc</code>：退出输入模式</li></ul></li><li><code>上下左右/kjhl</code>：移动光标 <ul><li>输入数字在按上下左右（或kjhl）表示移动多少位置，比如输入 5j 表示向下移动5行</li></ul></li><li><code>ctrl + f</code>： 向下翻页</li><li><code>ctrl + b</code>： 向上翻页</li><li><code>ctrl + d</code>： 向下滚半页</li><li><code>ctrl + u</code>： 向上滚半页</li><li><code>home</code>： 光标移动到行首</li><li><code>end</code>： 光标移动到行尾</li><li><code>gg</code>： 光标移动到文件开头</li><li><code>G</code>： 光标移动到文件末尾</li><li><code>数字 + G</code>： 光标移动到指定（数字）行</li><li><code>/要查找的字符</code>： 向下查找指定字符</li><li><code>?要查找的字符</code>： 向上查找指定字符</li><li><code>dd</code>：删除行</li><li><code>u</code>： 撤销上一步操作</li><li><code>:</code>：在文件中输入冒号 <code>:</code> 进入命令行模式 <ul><li><code>w</code>：保存文件</li><li><code>q</code>：退出文件</li><li><code>:wq</code>：保存并退出文件</li></ul></li></ul><h2 id="shell脚本" tabindex="-1">shell脚本 <a class="header-anchor" href="#shell脚本" aria-label="Permalink to &quot;shell脚本&quot;">​</a></h2><p>shell脚本，本身就是一个文件，它以 <code>.sh</code> 为后缀，使用时会对文件的每一行进行执行。</p><p>我们可以创建一个sh结尾的文件如 <code>doit.sh</code>，在文件中写入以下内容</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./test/b.txt</span></span></code></pre></div><p>然后，我们可以执行这个脚本文件，即 <code>sh doit.sh</code> 或 <code>./doit.sh</code></p><p><strong>可能会出现错误</strong>： <code>-bash: ./doit.sh: Permission denied</code>，这说明我们没有权限执行这个脚本文件。</p><p>我们可以使用 <code>chmod</code> 命令给脚本文件添加执行权限，如 <code>chmod +x doit.sh</code> 或更简单的 <code>chmod 777 doit.sh</code></p><h2 id="文件赋权" tabindex="-1">文件赋权 <a class="header-anchor" href="#文件赋权" aria-label="Permalink to &quot;文件赋权&quot;">​</a></h2><p>在使用 <code>ll</code> 查看文件时，在最前方会有一个以 <code>-</code> 开头的权限字符串，如 <code>-rw-r--r--</code>。</p><p>10个字符，可以分成四组 ，第一个字符自己一组，之后每三个一组</p><ul><li>第一个字符：文件类型</li><li>三个字符：拥有者权限</li><li>三个字符：用户组权限</li><li>三个字符：其他组权限</li></ul><p><strong>文件类型的字符含义如下</strong>：</p><ul><li><code>-</code>：普通文件</li><li><code>d</code>：目录</li><li><code>l</code>：链接文件</li></ul><p><strong>代表权限的字符串中的字符含义如下</strong>：</p><ul><li>r：读权限，代表数字 <code>4</code></li><li>w：写权限，代表数字 <code>2</code></li><li>x：执行权限，代表数字 <code>1</code></li><li>-：无权限</li></ul><p>赋予权限时可以根据数字的计算赋予权限，比如 <code>4+2+1=7</code>，表示 <code>rwx</code>，<code>4+2=6</code>,表示<code>rw</code></p><p>如果要为<strong>所有人</strong>赋予<strong>读写执行</strong>权限：chmod 777 filename 如果要为<strong>拥有者</strong>赋予<strong>读执行</strong>权限：chmod 500 filename</p><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><ul><li>ps： 查看进程 <ul><li>ps aux： 查看所有正在执行的进程 <ul><li>第一行：权限</li><li>第二行：进程ID</li></ul></li><li>ps aux |grep &quot;top&quot;： 查看执行top的进程</li></ul></li><li>kill：结束进程 <ul><li>kill 进程ID：结束目标进程</li><li>kill -9 进程ID：强制结束目标进程</li></ul></li></ul><h2 id="通过端口号查进程-lsof" tabindex="-1">通过端口号查进程（lsof） <a class="header-anchor" href="#通过端口号查进程-lsof" aria-label="Permalink to &quot;通过端口号查进程（lsof）&quot;">​</a></h2><p>lsof 这个命令不时centos本身的命令需要安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lsof</span></span></code></pre></div><ul><li><code>lsof</code>：列出全部端口进程</li><li><code>lsof -i:8080</code>： 查看端口号是8080的进程</li></ul>`,36)]))}const g=i(s,[["render",d]]);export{m as __pageData,g as default};
