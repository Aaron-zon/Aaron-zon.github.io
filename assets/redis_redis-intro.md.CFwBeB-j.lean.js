import{_ as l,c as a,a0 as e,o as t}from"./chunks/framework.Db5sgsAJ.js";const r="/assets/image.B45d33so.png",s="/assets/image2.UYzEw6FD.png",f=JSON.parse('{"title":"Redis 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"redis/redis-intro.md","filePath":"redis/redis-intro.md"}'),o={name:"redis/redis-intro.md"};function n(p,i,d,c,h,u){return t(),a("div",null,i[0]||(i[0]=[e('<h1 id="redis-介绍" tabindex="-1">Redis 介绍 <a class="header-anchor" href="#redis-介绍" aria-label="Permalink to &quot;Redis 介绍&quot;">​</a></h1><p>解决项目中的缓存问题</p><h2 id="主要内容" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容" aria-label="Permalink to &quot;主要内容&quot;">​</a></h2><ul><li>数据类型</li><li>命令</li><li>配置</li><li>持久化</li><li>管道</li><li>事务</li><li>分布式锁</li><li>主从复制</li><li>哨兵模式</li><li>集群</li><li>客户端</li><li>应用场景</li></ul><h2 id="数据库架构发展" tabindex="-1">数据库架构发展 <a class="header-anchor" href="#数据库架构发展" aria-label="Permalink to &quot;数据库架构发展&quot;">​</a></h2><p>传统数据库的扩展性差（需要复杂的技术来实现），大数据下IO压力大（硬盘读写缓慢），表结构更改困难</p><p>发展流程：</p><ul><li>单库：最初的数据读写由单个数据库完成 <ul><li>随着访问量增加而出现性能问题</li></ul></li><li>缓存：数据访问量过高后，发展为将数据缓存到内存中，提高访问速度（内存读写远快于硬盘） <ul><li>通过缓存，缓解数据库的压力，优化数据结构和索引</li></ul></li><li>读写分离：访问量进一步增长，缓存也无法解决时，开始以读写分离的方式解决 <ul><li>数据写入压力增加，主从复制和读写的方案进入视野</li></ul></li><li>分库分表：访问量再次增长，开始再次分割数据库 <ul><li>主库的写压力过高，开始使用InnoDB引擎，以及分库技术</li></ul></li></ul><h2 id="单库架构和主从设计" tabindex="-1">单库架构和主从设计 <a class="header-anchor" href="#单库架构和主从设计" aria-label="Permalink to &quot;单库架构和主从设计&quot;">​</a></h2><p>单库架构三个阶段：</p><p>单服务器阶段所有的业务数据都存放在一个数据库中</p><p>分布式部署阶段，通过负载均衡流量分散到多台服务器上，但依旧访问一个数据库（这里之解决了服务器压力）</p><p>引入缓存，缓解数据库读写压力（在数据库前设置缓存处理，读压力变小）</p><p>主从设计:</p><p>进一步利用数据库的读写分离，在写入数据时，访问 <strong>主数据库（Master）</strong>，主数据库通过主从复制机制将数据更新同步到 <strong>从数据库（Slave）</strong>，这样当服务器读取数据时，就可以通过 <strong>从数据</strong> 库获得数据。</p><h2 id="主从设计的方式" tabindex="-1">主从设计的方式 <a class="header-anchor" href="#主从设计的方式" aria-label="Permalink to &quot;主从设计的方式&quot;">​</a></h2><p>垂直拆分：</p><p>为了各个业务模块相互不受影响，我们把应用层进行垂直拆分，即：把商品模块、订单模块、用户模块进行拆分，都单独作为一个应用系统，分别构建读写独立的数据库服务器，这样，当某个业务模块出现故障时，其他业务模块不受影响。</p><p><img src="'+r+'" alt="垂直拆分"></p><p>水平拆分：</p><p>MyCat 作为数据库中间件，可以帮助我们解决多个数据库不好管理的问题。只需要统一连接 MyCat 对外提供一个地址，而 MyCat 则帮这些项目练习所有后端的 MySQL 数据库。</p><p><img src="'+s+'" alt="alt text"></p>',22)]))}const g=l(o,[["render",n]]);export{f as __pageData,g as default};
