import{_ as p,c as r,a0 as n,j as i,G as e,w as t,a as l,B as h,o}from"./chunks/framework.Db5sgsAJ.js";const d="/assets/1._rsPGxIq.png",k="/assets/2.CAkHOl_3.png",c="/assets/3.CBS2tf_U.png",g="/assets/4.DMh3IRPJ.png",E="/assets/5.Bw_XVIbV.png",u="/assets/6.Css8yX1z.png",f="/assets/7.Bt455nrt.png",x="/assets/8.BNcZm8Ql.png",y="/assets/9.DfyNTH4k.png",b="/assets/10.CPc7R_KP.png",A=JSON.parse('{"title":"Flex 布局","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"css/css3-flex.md","filePath":"css/css3-flex.md"}'),m={name:"css/css3-flex.md"},F={tabindex:"0"};function C(w,s,v,q,B,P){const a=h("nobr");return o(),r("div",null,[s[19]||(s[19]=n(`<h1 id="flex-布局" tabindex="-1">Flex 布局 <a class="header-anchor" href="#flex-布局" aria-label="Permalink to &quot;Flex 布局&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><a href="https://ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">参考</a></p><p>Flex 布局，即 弹性布局，是 CSS3 中新增的布局方式，它允许开发者以一种更简洁的方式来定义元素在容器中的排列方式，从而实现更灵活的布局。</p><p>通过 <code>display: flex;</code> 或 <code>display: inline-flex</code> 来开启 Flex 布局。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>设置为 Flex 布局后，子元素的 <code>float</code>、<code>clear</code>、<code>vertical-align</code> 属性将失效。</p></div><h3 id="flex-与-inline-flex的区别" tabindex="-1">flex 与 inline-flex的区别 <a class="header-anchor" href="#flex-与-inline-flex的区别" aria-label="Permalink to &quot;flex 与 inline-flex的区别&quot;">​</a></h3><p><strong>display: flex 的特点</strong></p><ul><li>块级弹性盒子：设置 <code>display: flex;</code>时，他会是一个带着块级特点的弹性盒子容器。</li><li>占据空间：因为拥有块级特点，因此它会占据芙蓉区的整个宽度，并且会独占一行。</li></ul><p><strong>display: inline-flex 的特点</strong></p><ul><li>行级弹性盒子：设置 <code>display: inline-flex;</code>时，他会是一个带有行级特点的弹性盒子容器。</li><li>占据空间：因为拥有行级的特点，因此他只占据所需的最小空间，且不会独占一行，可以与其他行级元素在一行显示。</li></ul><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p><code>flex</code> 布局容器拥有两根轴，默认<strong>水平方向</strong>为<code>主轴</code>、<strong>垂直方向</strong>为<code>交叉轴</code>。</p><p>默认情况下，容器内的元素，无论是行级元素还是块级元素都会按照主轴方向排列开来。</p><h2 id="容器的样式" tabindex="-1">容器的样式 <a class="header-anchor" href="#容器的样式" aria-label="Permalink to &quot;容器的样式&quot;">​</a></h2>`,16)),i("table",F,[s[18]||(s[18]=i("thead",null,[i("tr",null,[i("th",null,"名称"),i("th",null,"描述"),i("th",null,"可用值")])],-1)),i("tbody",null,[i("tr",null,[i("td",null,[e(a,null,{default:t(()=>s[0]||(s[0]=[l(" flex-direction ")])),_:1})]),s[1]||(s[1]=i("td",null,"设置主轴方向",-1)),s[2]||(s[2]=i("td",null,"row / row-reverse / column / column-reverse",-1))]),i("tr",null,[i("td",null,[e(a,null,{default:t(()=>s[3]||(s[3]=[l(" flex-wrap ")])),_:1})]),s[4]||(s[4]=i("td",null,"设置元素换行方式",-1)),s[5]||(s[5]=i("td",null,"nowrap / wrap / wrap-reverse",-1))]),i("tr",null,[i("td",null,[e(a,null,{default:t(()=>s[6]||(s[6]=[l(" flex-flow ")])),_:1})]),s[7]||(s[7]=i("td",null,[l("同时设置 "),i("code",null,"flex-direction"),l(" 和 "),i("code",null,"flex-wrap")],-1)),s[8]||(s[8]=i("td",null,"flex-flow: row wrap;",-1))]),i("tr",null,[i("td",null,[e(a,null,{default:t(()=>s[9]||(s[9]=[l(" justify-content ")])),_:1})]),s[10]||(s[10]=i("td",null,"设置主轴对齐方式",-1)),s[11]||(s[11]=i("td",null,"flex-start / flex-end / center / space-between / space-around",-1))]),i("tr",null,[i("td",null,[e(a,null,{default:t(()=>s[12]||(s[12]=[l(" align-items ")])),_:1})]),s[13]||(s[13]=i("td",null,"设置交叉轴对齐方式",-1)),s[14]||(s[14]=i("td",null,"flex-start / flex-end / center / baseline / stretch",-1))]),i("tr",null,[i("td",null,[e(a,null,{default:t(()=>s[15]||(s[15]=[l(" align-content ")])),_:1})]),s[16]||(s[16]=i("td",null,"设置多根轴线对齐方式",-1)),s[17]||(s[17]=i("td",null,"flex-start / flex-end / center / space-between / space-around / stretch",-1))])])]),s[20]||(s[20]=n('<h3 id="flex-direction-主轴方向" tabindex="-1">flex-direction（主轴方向） <a class="header-anchor" href="#flex-direction-主轴方向" aria-label="Permalink to &quot;flex-direction（主轴方向）&quot;">​</a></h3><p><code>flex-direction</code> 决定了主轴的方向。</p><ul><li><strong>row</strong>：主轴为水平方向，起点在左端。</li><li><strong>row-reverse</strong>：主轴为水平方向，起点在右端。</li><li><strong>column</strong>：主轴为垂直方向，起点在上沿。</li><li><strong>column-reverse</strong>：主轴为垂直方向，起点在下沿。</li></ul><p><img src="'+d+'" alt="flex-direction"></p><h3 id="flex-wrap-换行" tabindex="-1">flex-wrap（换行） <a class="header-anchor" href="#flex-wrap-换行" aria-label="Permalink to &quot;flex-wrap（换行）&quot;">​</a></h3><p><code>flex-wrap</code> 决定如何换行。正常情况下在容器尺寸不足时，元素会换行并继续按照主轴方向排列。</p><p><code>Flex 布局</code>中提供了多种灵活的换行方式</p><ul><li><strong>nowrap</strong>：（默认）不换行，元素会溢出容器。 <img src="'+k+'" alt="nowrap"></li><li><strong>wrap</strong>：正常换行。 <img src="'+c+'" alt="wrap"></li><li><strong>wrap-reverse</strong>：换行，但换行方向相反。 <img src="'+g+`" alt="wrap-reverse"></li></ul><h3 id="flex-flow-主轴方向-换行" tabindex="-1">flex-flow（主轴方向 换行） <a class="header-anchor" href="#flex-flow-主轴方向-换行" aria-label="Permalink to &quot;flex-flow（主轴方向 换行）&quot;">​</a></h3><p><code>flex-flow</code> 是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的结合，默认值为 <code>row nowrap</code>。</p><p>他的参数有两个，第一个用于设置 <code>flex-direction</code>，第二个用于设置 <code>flex-wrap</code>。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="justify-content-主轴对其方式" tabindex="-1">justify-content（主轴对其方式） <a class="header-anchor" href="#justify-content-主轴对其方式" aria-label="Permalink to &quot;justify-content（主轴对其方式）&quot;">​</a></h3><p><code>justify-content</code> 属性决定主轴上的对齐方式。</p><p>注意是主轴方向的对齐方式，因为 <code>flex 布局</code> 可以使用 <code>flex-direction</code> 来改变主轴，因此主轴不是一直都是水平方向。</p><ul><li>flex-start：（默认）左对齐</li><li>flex-end：右对齐</li><li>center：居中</li><li>spance-between：两队对齐，项目之间间隔相等</li><li>spance-around：每个项目两侧相等，因此项目之间的间隔比项目与边框的间隔大一倍。</li></ul><p><img src="`+E+'" alt="justify-content"></p><h3 id="align-items-交叉轴对齐方式" tabindex="-1">align-items（交叉轴对齐方式） <a class="header-anchor" href="#align-items-交叉轴对齐方式" aria-label="Permalink to &quot;align-items（交叉轴对齐方式）&quot;">​</a></h3><p><code>align-items</code> 属性决定交叉轴上的对齐方式。</p><ul><li>flex-start：交叉轴起点对齐</li><li>flex-end：交叉轴终点对齐</li><li>center：交叉轴中点对齐</li><li>baseline：项目第一行文字基线对齐</li><li>stretch：（默认）如果未设置高度或设置为auto时，沾满整个容器</li></ul><p><img src="'+u+'" alt="align-items"></p><h3 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-label="Permalink to &quot;align-content&quot;">​</a></h3><p><code>align-content</code> 属性定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用</p><ul><li>flex-start：与交叉轴的起点对齐</li><li>flex-end：与交叉轴的终点对齐</li><li>center：交叉轴的中点对齐</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around：根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li><li>stretch：（默认）轴线占满整个交叉轴</li></ul><p><img src="'+f+`" alt="align-content"></p><h2 id="子元素的样式" tabindex="-1">子元素的样式 <a class="header-anchor" href="#子元素的样式" aria-label="Permalink to &quot;子元素的样式&quot;">​</a></h2><p>以下的样式需要设置在 <code>flex</code> 容器的子元素上</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h3 id="order" tabindex="-1">order <a class="header-anchor" href="#order" aria-label="Permalink to &quot;order&quot;">​</a></h3><p><code>order</code> 属性用于对容器内子元素进行排序，值越小，排列越靠前，默认为 0。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><p><img src="`+x+`" alt="order"></p><h3 id="flex-grow" tabindex="-1">flex-grow <a class="header-anchor" href="#flex-grow" aria-label="Permalink to &quot;flex-grow&quot;">​</a></h3><p><code>flex-grow</code> 用于设置容器内子元素的放大比例，默认为0（即就算存在剩余空间，也不放大）。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-grow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;number&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* default 0 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+y+`" alt="flex-grow"></p><p>如果所有项目的 <code>flex-grow</code> 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 <code>flex-grow</code> 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-label="Permalink to &quot;flex-shrink&quot;">​</a></h3><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-shrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;number&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* default 1 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+b+'" alt="flex-shrink"></p><p>如果所有项目的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 <code>flex-shrink</code> 属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-label="Permalink to &quot;flex-basis&quot;">​</a></h3><h3 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h3><h3 id="align-self" tabindex="-1">align-self <a class="header-anchor" href="#align-self" aria-label="Permalink to &quot;align-self&quot;">​</a></h3>',47))])}const j=p(m,[["render",C]]);export{A as __pageData,j as default};
