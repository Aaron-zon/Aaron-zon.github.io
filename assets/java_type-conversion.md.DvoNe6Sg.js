import{ax as i,A as a,aQ as t,z as n}from"./chunks/framework.BWRXlwpK.js";const g=JSON.parse('{"title":"类型转换","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"java/type-conversion.md","filePath":"java/type-conversion.md"}'),h={name:"java/type-conversion.md"};function l(p,s,e,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h1><h2 id="_1-同种数据类型" tabindex="-1">1.同种数据类型 <a class="header-anchor" href="#_1-同种数据类型" aria-label="Permalink to &quot;1.同种数据类型&quot;">​</a></h2><p>同种数据类型之间实可以直接进行赋值操作的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同为 int 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同为 float 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span></code></pre></div><h2 id="_2-不同种数据类型" tabindex="-1">2.不同种数据类型 <a class="header-anchor" href="#_2-不同种数据类型" aria-label="Permalink to &quot;2.不同种数据类型&quot;">​</a></h2><p>不同数据类型之间转换，需要注意转换问题。</p><h3 id="自动类型转换-隐式转换" tabindex="-1">自动类型转换（隐式转换） <a class="header-anchor" href="#自动类型转换-隐式转换" aria-label="Permalink to &quot;自动类型转换（隐式转换）&quot;">​</a></h3><p>小 -&gt; 大</p><p>小数据类型，可以向大数据类型进行自动转换，如： <code>int -&gt; long</code>、<code>float -&gt; double</code>.</p><p>顺序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>byte → short → int → long → float → double</span></span>
<span class="line"><span>       ↑</span></span>
<span class="line"><span>      char</span></span></code></pre></div><p>例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b = 10 自动转换 int -&gt; double</span></span></code></pre></div><p><strong>注意：</strong></p><ul><li><code>boolean</code> 不参与数值类型转换。</li><li><code>char</code> 可以转换为 <code>int</code>（对应 Unicode 编码）</li></ul><h3 id="强制类型转换-显示转换" tabindex="-1">强制类型转换（显示转换） <a class="header-anchor" href="#强制类型转换-显示转换" aria-label="Permalink to &quot;强制类型转换（显示转换）&quot;">​</a></h3><p>大 -&gt; 小</p><p><strong>必须使用强制强制转换符</strong> <code>(type)</code></p><p>可能 <strong>丢失精度或溢出</strong></p><p>例:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9.78</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) d; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// i = 9</span></span></code></pre></div><p>风险：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) x; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// y = -126 （因为超过了 byte的最大值范围，因此溢出）</span></span></code></pre></div><h2 id="_3-基本类型与包装类之间的转换" tabindex="-1">3.基本类型与包装类之间的转换 <a class="header-anchor" href="#_3-基本类型与包装类之间的转换" aria-label="Permalink to &quot;3.基本类型与包装类之间的转换&quot;">​</a></h2><p>每个基本类型都有与其对应的引用类型（包装类），在进行转换时会进行自动 装箱/拆箱。</p><h3 id="自动装箱" tabindex="-1">自动装箱 <a class="header-anchor" href="#自动装箱" aria-label="Permalink to &quot;自动装箱&quot;">​</a></h3><p>基本类型 -&gt; 包装类</p><p>自动装箱会将同种类型的基本类型转换为包装类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动装箱</span></span></code></pre></div><h3 id="自动拆箱" tabindex="-1">自动拆箱 <a class="header-anchor" href="#自动拆箱" aria-label="Permalink to &quot;自动拆箱&quot;">​</a></h3><p>包装类 -&gt; 基本类型</p><p>自动拆箱会将同种类的包装类转换为基本类型</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动拆箱</span></span></code></pre></div><p><strong>注意：</strong></p><ul><li>装箱/拆箱 底层通过 <code>Integer.valueOf()</code> 与 <code>Integer.intValue()</code> 实现。</li><li>若对象为 <code>null</code>，拆箱会抛出 <code>NullPointerException</code>。</li></ul><h2 id="_4-基本类型与字符串之间的转换" tabindex="-1">4.基本类型与字符串之间的转换 <a class="header-anchor" href="#_4-基本类型与字符串之间的转换" aria-label="Permalink to &quot;4.基本类型与字符串之间的转换&quot;">​</a></h2><p><strong>基本类型 → 字符串</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 拼接</span></span></code></pre></div><p><strong>字符串 → 基本类型</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Double.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.14&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boolean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>注意：</strong></p><ul><li>若字符串格式非法，会抛出 NumberFormatException。</li></ul><h2 id="_5-引用类型之间的转换" tabindex="-1">5.引用类型之间的转换 <a class="header-anchor" href="#_5-引用类型之间的转换" aria-label="Permalink to &quot;5.引用类型之间的转换&quot;">​</a></h2><p><strong>向上转型</strong></p><p>子类 → 父类（自动）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Animal a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动类型提升</span></span></code></pre></div><p><strong>向下转型</strong></p><p>父类 → 子类（需强制转换）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Animal a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dog d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Dog) a;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Animal a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dog d2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Dog) a2;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时错误 ClassCastException</span></span></code></pre></div><p><strong>安全判断：</strong> 为预防错误，可加入判断要转换的对象是否属于目标类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dog) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Dog d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Dog) a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_6-基本类型与引用类型的转换限制" tabindex="-1">6.基本类型与引用类型的转换限制 <a class="header-anchor" href="#_6-基本类型与引用类型的转换限制" aria-label="Permalink to &quot;6.基本类型与引用类型的转换限制&quot;">​</a></h2><table tabindex="0"><thead><tr><th>转换方向</th><th>是否允许</th><th>示例</th><th>注意事项</th></tr></thead><tbody><tr><td>基本 → 基本</td><td>✅</td><td><code>int → double</code></td><td>自动或强制转换</td></tr><tr><td>包装类 ↔ 基本</td><td>✅</td><td><code>Integer ↔ int</code></td><td>自动装箱/拆箱</td></tr><tr><td>基本 ↔ 引用（非包装类）</td><td>❌</td><td>不允许</td><td>不能直接转换</td></tr><tr><td>引用 ↔ 引用</td><td>✅</td><td><code>Dog ↔ Animal</code></td><td>需类型兼容</td></tr><tr><td>基本 ↔ String</td><td>✅</td><td><code>int ↔ String</code></td><td>使用工具方法</td></tr></tbody></table><h2 id="_7-其他注意点" tabindex="-1">7.其他注意点 <a class="header-anchor" href="#_7-其他注意点" aria-label="Permalink to &quot;7.其他注意点&quot;">​</a></h2><ul><li>1.<code>boolean</code> 不能与其他类型互相转换</li><li>2.拆箱时若对象为 <code>null</code>，抛出异常 <code>NullPointerException</code></li><li>3.强制类型转换可能造成溢出</li><li>4.<code>instanceof</code> 用于放置向下转型错误</li><li>5.JDK5之后自动拆箱、自动装箱简化了代码，但是要注意性能与空指针风险</li></ul>`,55)]))}const E=i(h,[["render",l]]);export{g as __pageData,E as default};
