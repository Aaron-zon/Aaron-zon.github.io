import{_ as e,c as i,a0 as t,o as a}from"./chunks/framework.Db5sgsAJ.js";const l="/assets/image.C1aUtTDA.png",o="/assets/image-1.CwbvMy8-.png",n="/assets/image-2.C8xDPJZi.png",p="/assets/image-3.T_rDzaCF.png",d="/assets/image-4.CpDoynlY.png",r="/assets/image-5.CGiO7nwH.png",c="/assets/image-6.DpqrRnrl.png",g="/assets/image-7.Cv-DtmeZ.png",f=JSON.parse('{"title":"node 全局对象","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"node/node-global.md","filePath":"node/node-global.md"}'),m={name:"node/node-global.md"};function h(u,s,_,k,b,E){return a(),i("div",null,s[0]||(s[0]=[t('<h1 id="node-全局对象" tabindex="-1">node 全局对象 <a class="header-anchor" href="#node-全局对象" aria-label="Permalink to &quot;node 全局对象&quot;">​</a></h1><p>和 js 里一样，node 中也有全局对象，但是有些不同。</p><p>在 js 中全局对象是 <code>window</code>，而在 node 中全局对象是 <code>global</code>。</p><p><img src="'+l+'" alt="alt text"></p><p>同js一样，全局对象内的属性都是可以直接使用的。</p><p>全局对象 <code>global</code> 中有同名属性 <code>global</code>，着代表着全局对象本身。</p><p><img src="'+o+'" alt="alt text"></p><p><img src="'+n+`" alt="alt text"></p><p>它的赋值方式相当于：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span></code></pre></div><h2 id="常用的属性、函数" tabindex="-1">常用的属性、函数 <a class="header-anchor" href="#常用的属性、函数" aria-label="Permalink to &quot;常用的属性、函数&quot;">​</a></h2><ul><li>setTimeout：与js中的用法相同，不过js中返回值是一个数字，node中返回一个对象</li><li>setInterval：与js中的用法相同，不过js中返回值是一个数字，node中返回一个对象</li><li>setImmediate：立即执行的，其效果类似于 <code>setTimeout(fn, 0)</code></li><li>console：控制台输出</li><li>__dirname：当前文件所在的目录，它不是 <code>global</code> 的属性</li></ul><p><img src="`+p+'" alt="alt text"></p><ul><li>__filename：获取当前模块的文件路径，它不是 <code>global</code> 的属性</li></ul><p><img src="'+d+'" alt="alt text"></p><ul><li>Buffer：缓冲区，用于处理二进制数据</li></ul><p><img src="'+r+'" alt="alt text"></p><ul><li><p>process</p><ul><li>cwd()：返回当前node进程的工作目录</li><li>exit()：强制退出node进程，可以传入一个参数，表示退出时的状态码</li><li>argv：返回 String[]，获取执行代码时命令中所有的参数</li></ul><p><img src="'+c+'" alt="alt text"></p><ul><li>platform：表示当前操作系统</li></ul><p><img src="'+g+'" alt="alt text"></p><ul><li>kill(pid)：用于杀死进程</li><li>env：获取环境变量</li></ul></li></ul>',18)]))}const j=e(m,[["render",h]]);export{f as __pageData,j as default};
