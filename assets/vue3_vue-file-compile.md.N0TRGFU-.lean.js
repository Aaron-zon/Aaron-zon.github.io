import{_ as a,c as e,a0 as n,o as l}from"./chunks/framework.P9qPzDnn.js";const p="/assets/1.D-u3P3gI.png",t="/assets/2.BhbLeKKS.png",h="/assets/3.428zVWsN.png",i="/assets/4.D3zJ7Sxj.png",y=JSON.parse('{"title":"Vue 文件编译","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/vue-file-compile.md","filePath":"vue3/vue-file-compile.md"}'),k={name:"vue3/vue-file-compile.md"};function o(d,s,r,c,E,u){return l(),e("div",null,s[0]||(s[0]=[n('<h1 id="vue-文件编译" tabindex="-1">Vue 文件编译 <a class="header-anchor" href="#vue-文件编译" aria-label="Permalink to &quot;Vue 文件编译&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>参考<a href="https://vue-compiler.iamouyang.cn/" target="_blank" rel="noreferrer">Vue3 编译原理揭秘</a>。</p><p>因为浏览器无法直接使用 <code>Vue</code> 文件，所以需要编译为 <code>JavaScript</code> 文件。</p><p>在 <code>Webpack</code> 中，是通过 <code>vue-loader</code> 插件实现。而在 <code>Vite</code> 中，则是通过 <code>@vitejs/plugin-vue</code> 插件实现。</p><div class="info custom-block"><p class="custom-block-title">编译时的入口文件</p><p>在 <code>Vue3</code> 项目进行编译时，入口文件是 <code>vite.config.ts</code>，在这个文件中会引入 <code>@vitejs/plugin-vue</code>，并执行方法 <code>vuePlugin</code>。</p><p>当用户打开画面时，会从 <code>src/main.ts</code> 开始加载，没个被加载的文件会调用 <code>vuePlugin</code> 中的 <code>transform</code> 方法。</p></div><h2 id="调试源码" tabindex="-1">调试源码 <a class="header-anchor" href="#调试源码" aria-label="Permalink to &quot;调试源码&quot;">​</a></h2><p>在了解 <code>Vue</code> 文件编译时，需要深入查看源码。</p><p>可以在 VsCode 中进行 <code>Debug</code>，来了解程序执行的过程。</p><ul><li>1.新建项目，可在 <code>vite.config.ts</code> 文件的行号前单击添加断点。</li></ul><p><img src="'+p+'" alt="添加断点"></p><ul><li>2.添加 JavaScript调试终端</li></ul><p><img src="'+t+'" alt="添加终端"></p><ul><li>3.在右侧调试栏目下选择 JavaScript调试终端</li></ul><p><img src="'+h+'" alt="设置断点模式"></p><ul><li>4.在终端输入 <code>npm run dev</code> 运行项目（这时会自动跳转到断点上）</li></ul><p><img src="'+i+'" alt="启动项目"></p><p>图中是 <code>vite.config.ts</code> 调用的 <code>@vitejs/plugin-vue</code> 中用来初始化的方法 <code>vuePlugin</code>。</p><p><img src="'+i+`" alt="vuePlugin"></p><h2 id="vueplugin" tabindex="-1">vuePlugin <a class="header-anchor" href="#vueplugin" aria-label="Permalink to &quot;vuePlugin&quot;">​</a></h2><p><code>vuePlugin</code> 是 <code>@vitejs/plugin-vue</code> 中一个重要的方法，他会在初始阶段获取用于将 .vue 文件转换为 .js 文件的方法。</p><p>并在画面加载文件时进行检查（检查是否是 .vue 文件）和转换（将 .vue 文件转换为 .js 文件）。</p><p>这里只介绍几个主要的函数和它要做的事情，因此会将原代码进行简化，只提取必要部分。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vuePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rawOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shallowRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite:vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>vuePlugin</code> 方法中，最终会返回一个对象，对象中 <code>buildStart</code>、<code>transform</code> 是重要的钩子函数。</p><ul><li><p><code>buildStart</code> 在服务器启动时调用</p></li><li><p><code>transform</code> 在对文件进行解析时调用</p></li></ul><h3 id="buildstart" tabindex="-1">buildStart <a class="header-anchor" href="#buildstart" aria-label="Permalink to &quot;buildStart&quot;">​</a></h3><p><code>buildStart</code> 在服务器启动时调用，它的主要作用是获取编译 <code>.vue文件</code> 所用的各种方法，即为 <code>option.value.compiler</code> 赋值。</p><p>在 <code>vuePlugin</code> 的最开始我们可以看到，<code>option.value.compiler</code> 最初为 null，因此需要在服务器启动的最开始进行赋值。</p><p>以下为简化后的 <code>buildStart</code> 函数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.value.compiler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.value.compiler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.value.root);</span></span></code></pre></div><p>代码中会判断 <code>options.value.compiler</code> 是否有值，如果有则继续使用 <code>options.value.compiler</code>，如果没有则调用 <code>resolveCompiler</code> 方法，并用结果为 <code>options.value.compiler</code> 赋值。</p><p>那么 <code>resolveCompiler</code> 是如何获取编译 <code>.vue文件</code> 所用的各种方法的呢？这些方法又存在哪里呢？</p><p>我们可以继续沿着 <code>resolveCompiler</code> 向下，以下是简化后的代码。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryResolveCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryResolveCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryResolveCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取项目使用的 Vue 的 package.json 文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vueMeta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue/package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, root);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断使用的是否是 Vue3 以上版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vueMeta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vueMeta.version.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue/compiler-sfc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, root);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>代码很简单，就是判断使用的 <code>Vue</code> 版本，如果是 <code>Vue3</code> 及以上版本就引入 <code>vue/compiler-sfc</code>，并将内容赋值给 <code>options.value.compiler</code>。</p><p>也就是说我们要使用的编译 <code>.vue文件</code> 的方法来自于 <code>vue/compiler-sfc</code>。</p>`,37)]))}const v=a(k,[["render",o]]);export{y as __pageData,v as default};
