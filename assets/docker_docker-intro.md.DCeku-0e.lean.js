import{_ as o,c as r,a2 as t,o as a}from"./chunks/framework.BLTIpkzl.js";const D=JSON.parse('{"title":"什么是 Docker？","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docker/docker-intro.md","filePath":"docker/docker-intro.md"}'),c={name:"docker/docker-intro.md"};function i(n,e,d,l,k,p){return a(),r("div",null,e[0]||(e[0]=[t('<h1 id="什么是-docker" tabindex="-1">什么是 Docker？ <a class="header-anchor" href="#什么是-docker" aria-label="Permalink to &quot;什么是 Docker？&quot;">​</a></h1><p>Docker 是一个开源的容器平台，它允许我们使用一个轻量级的虚拟化容器来运行我们的应用程序，而不需要担心系统依赖和配置问题。</p><p>Docker 的核心思想是：将应用程序和它的依赖打包到一个轻量级的容器中，这个容器可以运行在任何支持 Docker 的环境中，而不需要担心系统依赖和配置问题。</p><p>**总结：**Docker 是一种容器技术，它解决了软件跨环境迁移的问题。</p><p><strong>举个栗子：</strong></p><p>我们有一个 Java 的应用程序，它使用了 JDK 8 进行开发，使用了 tomcat 作为服务器容器。</p><p>当我将它部署到测试环境，或是生产环境时，我需要确保测试环境使用的 JDK 版本是 8，且有 tomcat，如果不满足以上条件就极有可能部署失败。</p><p>上述的条件也许还好满足，但当应用依赖的东西变多，当使用的操作系统不同（Window、macOS、Linux），部署时考虑的不够完善时，就将极有可能出现问题。</p><p>而 Docker 恰恰解决了软件跨环境迁移的问题，让我们不必为这些开发无关的东西做考虑，只需将我们的应用打包成镜像，然后通过 Docker 运行即可。</p><h2 id="docker-历史与特点" tabindex="-1">Docker 历史与特点 <a class="header-anchor" href="#docker-历史与特点" aria-label="Permalink to &quot;Docker 历史与特点&quot;">​</a></h2><ul><li>Docker 诞生于2013年初，基于 Go 语言实现，dotCloud公司出品（后改名为 Docker Inc）</li><li>Docker 可以让开发者打包它们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上。</li><li>容器是完全使用沙盒机制，互相隔离（也就是说一台机器上可以启动很多个容器）。</li><li>容器性能开销极低</li><li>Docker 从 17.03 版本之后分为 免费的CE（Community Edition：社区版）和 付费的EE（Enterprise Edition：企业版）</li></ul>',11)]))}const m=o(c,[["render",i]]);export{D as __pageData,m as default};
