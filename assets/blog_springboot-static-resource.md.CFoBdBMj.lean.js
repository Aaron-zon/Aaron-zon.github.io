import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.BLTIpkzl.js";const E=JSON.parse('{"title":"springboot 静态资源访问","description":"","frontmatter":{},"headers":[],"relativePath":"blog/springboot-static-resource.md","filePath":"blog/springboot-static-resource.md"}'),e={name:"blog/springboot-static-resource.md"};function p(l,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="springboot-静态资源访问" tabindex="-1">springboot 静态资源访问 <a class="header-anchor" href="#springboot-静态资源访问" aria-label="Permalink to &quot;springboot 静态资源访问&quot;">​</a></h1><h2 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-label="Permalink to &quot;环境&quot;">​</a></h2><p><strong>springboot</strong>: 3.1.5</p><p><strong>java</strong>：17</p><p><strong>配置文件</strong>: src/main/resources/<code>application.yml</code></p><p><strong>项目结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span> └─ main/</span></span>
<span class="line"><span>     └─ resources/</span></span>
<span class="line"><span>         └─ static/</span></span>
<span class="line"><span>             └─ pdf/</span></span>
<span class="line"><span>                 └─ 1.pdf</span></span></code></pre></div><p><strong>需求</strong>:</p><ul><li>1.访问 <code>1.pdf</code>，不依赖接口浏览器直接浏览此文件</li><li>2.拒绝访问时（HTTP ERROR 403）</li><li>3.设置其他静态目录</li></ul><h2 id="spring-boot-静态资源映射机制" tabindex="-1">Spring Boot 静态资源映射机制 <a class="header-anchor" href="#spring-boot-静态资源映射机制" aria-label="Permalink to &quot;Spring Boot 静态资源映射机制&quot;">​</a></h2><p>Spring Boot 默认情况下就会把 <code>src/main/resources/static</code> 目录当成静态资源目录。也就是说：</p><p>要访问 <code>src/main/resources/static/pdf/1.pdf</code> 只需启动项目后，直接访问：<code>http://ip:port/pdf/1.pdf</code></p><p>也就是说，放在 static/pdf/ 下的所有文件，都会自动映射到 <code>http://ip:port/pdf/</code> 下面。</p><p><strong>映射规则</strong>：</p><table tabindex="0"><thead><tr><th style="text-align:left;">优先级</th><th style="text-align:left;">路径前缀</th><th style="text-align:left;">对应目录</th></tr></thead><tbody><tr><td style="text-align:left;">1️⃣</td><td style="text-align:left;"><code>/</code></td><td style="text-align:left;"><code>classpath:/META-INF/resources/</code></td></tr><tr><td style="text-align:left;">2️⃣</td><td style="text-align:left;"><code>/</code></td><td style="text-align:left;"><code>classpath:/resources/</code></td></tr><tr><td style="text-align:left;">3️⃣</td><td style="text-align:left;"><code>/</code></td><td style="text-align:left;"><code>classpath:/static/</code></td></tr><tr><td style="text-align:left;">4️⃣</td><td style="text-align:left;"><code>/</code></td><td style="text-align:left;"><code>classpath:/public/</code></td></tr></tbody></table><p>这几个文件夹可能同时存在，如果但他们的映射路径都为 <code>/</code>。</p><p><strong>静态资源优先级查找顺序</strong>:</p><p>如果几个文件夹中都有相同的文件（如：在 <code>static</code> 和 <code>public</code> 文件夹内同时存在 <code>1.pdf</code>），那么Spring Boot 会根据上表中 <strong>优先级</strong> 的顺序来查找。</p><h2 id="_1-访问静态资源" tabindex="-1">1.访问静态资源 <a class="header-anchor" href="#_1-访问静态资源" aria-label="Permalink to &quot;1.访问静态资源&quot;">​</a></h2><p>直接访问：<code>http://ip:port/pdf/1.pdf</code></p><h2 id="_2-拒绝访问时-http-error-403" tabindex="-1">2.拒绝访问时（HTTP ERROR 403） <a class="header-anchor" href="#_2-拒绝访问时-http-error-403" aria-label="Permalink to &quot;2.拒绝访问时（HTTP ERROR 403）&quot;">​</a></h2><p>如果在访问静态资源时出现了错误（HTTP ERROR 403），可能是项目中验证机制出现了问题</p><p>如果使用了类似 Spring Security的框架（哪怕是 spring-boot-starter-security 依赖在项目里），默认所有的路径都需要验证。</p><p><strong>解决办法</strong>: 放行静态资源路径，在配置中将 <code>/pdf/**</code> 传入到 <code>requestMatchers</code> 方法中，使在访问此路径资源时可以放行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecurityConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">securityFilterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sessionManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sessionCreationPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SessionCreationPolicy.STATELESS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeHttpRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestMatchers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pdf/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anonymous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3-设置其他静态目录" tabindex="-1">3.设置其他静态目录 <a class="header-anchor" href="#_3-设置其他静态目录" aria-label="Permalink to &quot;3.设置其他静态目录&quot;">​</a></h2>`,26)]))}const c=i(e,[["render",p]]);export{E as __pageData,c as default};
