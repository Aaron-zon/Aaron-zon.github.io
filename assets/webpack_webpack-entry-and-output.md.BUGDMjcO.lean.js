import{_ as e,c as a,a0 as o,o as s}from"./chunks/framework.Db5sgsAJ.js";const n="/assets/image-8.C627Yond.png",p="/assets/image-9.BDcxYS8t.png",i="/assets/image-10.B8BGCiig.png",r="/assets/image-11.B7qVXdst.png",l="/assets/image-12.EjKHxn_c.png",c="/assets/image-13.B8NUN-Jf.png",d="/assets/image-14._5se24a2.png",x=JSON.parse('{"title":"入口和出口","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"webpack/webpack-entry-and-output.md","filePath":"webpack/webpack-entry-and-output.md"}'),u={name:"webpack/webpack-entry-and-output.md"};function h(m,t,g,_,b,f){return s(),a("div",null,t[0]||(t[0]=[o('<h1 id="入口和出口" tabindex="-1">入口和出口 <a class="header-anchor" href="#入口和出口" aria-label="Permalink to &quot;入口和出口&quot;">​</a></h1><h2 id="node-环境下的路径符号" tabindex="-1">Node 环境下的路径符号 <a class="header-anchor" href="#node-环境下的路径符号" aria-label="Permalink to &quot;Node 环境下的路径符号&quot;">​</a></h2><ul><li><code>./</code>：在配置文件中，<code>./</code>表示 node 运行目录。</li><li><code>__dirname</code>：在所有情况下，都表示当前运行的js所在的目录</li></ul><h2 id="出口" tabindex="-1">出口 <a class="header-anchor" href="#出口" aria-label="Permalink to &quot;出口&quot;">​</a></h2><p>这里的出口是针对<strong>资源列表</strong>的 <strong>文件名或路径</strong> 的配置</p><p>出口通过 <strong>output</strong> 进行配置，一般常用的又两个属性 <strong>path、filename</strong></p><h3 id="output-path" tabindex="-1">output.path <a class="header-anchor" href="#output-path" aria-label="Permalink to &quot;output.path&quot;">​</a></h3><p>output.path 是一个绝对路径，表示存放输出资源的文件夹，一般使用 <code>path.resolve(__dirname, &#39;dist&#39;)</code> 来生成路径</p><p><img src="'+n+'" alt="alt text"></p><h3 id="output-filename" tabindex="-1">output.filename <a class="header-anchor" href="#output-filename" aria-label="Permalink to &quot;output.filename&quot;">​</a></h3><p>output.filename 是一个字符串，表示输出资源的文件名。</p><p><img src="'+p+'" alt="alt text"></p><p>当然也不只能设定文件，文件夹+文件也可以。</p><p><img src="'+i+'" alt="alt text"></p><h2 id="入口" tabindex="-1">入口 <a class="header-anchor" href="#入口" aria-label="Permalink to &quot;入口&quot;">​</a></h2><p>这里的入口指的其实就是chunk。</p><p><img src="'+r+'" alt="alt text"></p><p>入口可以有多个，但如果直接设置了多个入口，这时由于出口只有一个会报错 <code>Error: Conflict: Multiple chunks emit assets to the same filename bundle.js (chunks main and bbb)</code> 上描的bundle和bbb皆为配置名。</p><p><img src="'+l+'" alt="alt text"></p><p>为了解决这个问题，需要给出口的 <code>output.filename</code> 设置规则，用以输出多个文件。</p><p>规则需要写在 <code>[]</code> 中</p><ul><li><code>[name]</code>：打包时会将入口的 chunk 名替换掉 <code>[name]</code></li></ul><p><img src="'+c+'" alt="alt text"></p><ul><li>[hash]：将文件通过 hash 算法生成的字符串替换 <code>[hash]</code>，这可以有效的而防止浏览器缓存带来的问题，因为以但文件内容改变 hash 也跟着改变，这时浏览器就会重新从服务器拉取文件。</li></ul><p><img src="'+d+'" alt="alt text"></p><ul><li>[chunkhash]：同时hash，只不过这个是把 chunk 的 hash 当作文件名。</li></ul>',26)]))}const q=e(u,[["render",h]]);export{x as __pageData,q as default};
