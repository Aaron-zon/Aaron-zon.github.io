import{_ as e,c as t,a2 as n,o as s}from"./chunks/framework.BLTIpkzl.js";const o="/assets/image-6.D83MDSpN.png",p="/assets/image-7.B68gk4PN.png",b=JSON.parse('{"title":"编译过程","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"webpack/webpack-process.md","filePath":"webpack/webpack-process.md"}'),c={name:"webpack/webpack-process.md"};function r(l,a,i,h,u,k){return s(),t("div",null,a[0]||(a[0]=[n('<h1 id="编译过程" tabindex="-1">编译过程 <a class="header-anchor" href="#编译过程" aria-label="Permalink to &quot;编译过程&quot;">​</a></h1><p>webpack的作用是将源代码编译（构建、打包）成最终代码。</p><blockquote><p>初始化 ------ 编译 ------ 输出</p></blockquote><p><img src="'+o+'" alt="alt text"></p><p>整个过程大致可以分为三个阶段：</p><ul><li>1.初始化</li><li>2.编译</li><li>3.输出</li></ul><h2 id="_1-初始化" tabindex="-1">1. 初始化 <a class="header-anchor" href="#_1-初始化" aria-label="Permalink to &quot;1. 初始化&quot;">​</a></h2><p>此阶段，webpack会将 <strong>CLI 参数、配置文件、默认配置</strong> 进行融合，形成一个最终的配置对象。</p><p>对配置的处理过程时依托第三方库 <code>yargs</code> 完成的。</p><p>此阶段相对比较简单，主要是为了接下来的编译阶段做必要处理。</p><p>目前，可以简单的理解为，初始化阶段主要是制作一个最终的配置对象。</p><h2 id="_2-编译" tabindex="-1">2. 编译 <a class="header-anchor" href="#_2-编译" aria-label="Permalink to &quot;2. 编译&quot;">​</a></h2><p><strong>1）创建chunk</strong></p><p>chunk是webpack在内部构建过程中的一个概念，译为 <strong>块</strong>，它表示通过某个入口找到的所有依赖的统称。</p><p>根据入口模块（默认为 <strong>./src/index.js</strong>）创建一个chunk；chunk可能不止有一个，因为入口也可能不止一个。</p><p>每个chunk都至少拥有两个属性：<strong>name、id</strong></p><ul><li>name：默认为 main</li><li>id：位异的编号，开发环境中和name相同，生产环境中是一个数字，从0开始</li></ul><p><strong>2）构建所有依赖模块</strong></p><blockquote><p>main chunk</p></blockquote><p><img src="'+p+'" alt="alt text"></p><p><strong>3）产生 chunk assets</strong></p><p>在第二部完成后，chunk会产生一个模块列表，列表中包含了 <strong>模块id</strong> 和 <strong>模块转换后的代码</strong>。</p><p>接下来，webpack会根据配置为 chunk 生成一个资源列表，即 chunk assets。</p><p><strong>4）合并 chunk assets</strong></p><p>将多个 chunk 的 assets 合并到一起，并产生一个总的 hash</p><h2 id="_3-输出" tabindex="-1">3. 输出 <a class="header-anchor" href="#_3-输出" aria-label="Permalink to &quot;3. 输出&quot;">​</a></h2><p>此步骤非常简单，webpack将利用 node 中的 fs模块（文件处理模块），根据编译产生的总assets，生成相应的文件。</p><h2 id="涉及术语" tabindex="-1">涉及术语 <a class="header-anchor" href="#涉及术语" aria-label="Permalink to &quot;涉及术语&quot;">​</a></h2><ul><li>module：模块，分割的代码单元，webpack中的模块可一世任何内容的文件，不限于 JS。</li><li>chunk：webpack内部构建模块的块，一个chunk中包含多个模块，这些模块是入口模块通过以来分析得到的。</li><li>bundle：chunk构建好模块后，会生成 chunk 的资源清单，每个清单中的每一项都是一个 bundle。可以认为 bundle 是最终生成的文件。</li><li>hash：最终的资源清单所有内容联合生成的hash值</li><li>chunkhash：chunk生成的资源清单内容联合生成的hash值</li><li>chunkname：chunk的名称，如果没有配置则使用 main</li><li>id：通常指chunk的唯一编号，如果在开发环境下构建，和chunkname相同；如果生产环境下构建，则使用一个从0开始的数字进行编号</li></ul>',29)]))}const g=e(c,[["render",r]]);export{b as __pageData,g as default};
