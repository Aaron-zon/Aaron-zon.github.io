import{ax as l,A as o,aQ as r,z as a}from"./chunks/framework.BWRXlwpK.js";const g=JSON.parse('{"title":"Spring Cloud 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"springCloud/spring-cloud-intro.md","filePath":"springCloud/spring-cloud-intro.md"}'),p={name:"springCloud/spring-cloud-intro.md"};function n(e,i,s,t,d,c){return a(),o("div",null,i[0]||(i[0]=[r(`<h1 id="spring-cloud-介绍" tabindex="-1">Spring Cloud 介绍 <a class="header-anchor" href="#spring-cloud-介绍" aria-label="Permalink to &quot;Spring Cloud 介绍&quot;">​</a></h1><p>微服务是分布式架构的一种，所谓分布式就是把服务进行拆分，每个服务独立运行，又可以相互调用。在这个或称中会出现各种各样的问题。</p><p>而 spring cloud 是一个开源的微服务框架，它解决了服务拆分时的服务治理问题。</p><h2 id="相关网址" tabindex="-1">相关网址 <a class="header-anchor" href="#相关网址" aria-label="Permalink to &quot;相关网址&quot;">​</a></h2><ul><li>spring cloud: <a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noreferrer">https://spring.io/projects/spring-cloud</a></li><li>spring boot: <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noreferrer">https://spring.io/projects/spring-boot</a></li></ul><h2 id="微服务" tabindex="-1">微服务 <a class="header-anchor" href="#微服务" aria-label="Permalink to &quot;微服务&quot;">​</a></h2><p>传统开发中使用的单体架构，将所有的业务全部写在一起，随着业务愈来愈复杂，代码耦合度也越来越大，程序愈发臃肿，这使得后期维护的成本也大大增加。</p><p>而微服务是对服务进行拆分后，每个服务独立运行，在一个项目中由多个服务构成服务集群。</p><p>这时会遇到一些问题，如 一个功能往往需要多个服务共同完成，因此服务之间也需要进行通信，而当功能越来越多，服务得关系也就越来越复杂。</p><p>单靠人力维护十分困难，因此微服务会有一个 <code>注册中心</code>，用来记录每一个服务的 ip、端口、作用等信息。</p><p>当一个服务想要调用另一个服务时，可以通过注册中心来获得目标的信息。</p><p>在正式的开发过程中还有需多诸如此类的问题，微服务为对应这些问题也衍生出了需多解决办法，如：</p><ul><li>注册中心：记录每个服务的信息</li><li>配置中心：统一管理服务集群的配置信息</li><li>服务网关：用于处理请求，负载均衡</li><li>分布式缓存：用于缓解数据库高并发</li><li>...</li></ul><h2 id="单体架构-与-分布式架构" tabindex="-1">单体架构 与 分布式架构 <a class="header-anchor" href="#单体架构-与-分布式架构" aria-label="Permalink to &quot;单体架构 与 分布式架构&quot;">​</a></h2><p>单体架构：将所有业务功能集中在一个项目钟开发，达成一个包部署。</p><p>优点：</p><ul><li>架构简单</li><li>部署成本低</li></ul><p>缺点：</p><ul><li>耦合度很高</li><li>维护困难</li></ul><p>分布式架构：根据业务功能对系统进行拆分，每个业务模块作为独立的项目开发，成为一个服务。</p><p>优点：</p><ul><li>降低服务耦合度</li><li>有利于服务升级拓展</li></ul><p>分布式架构需要考虑的问题：</p><ul><li>服务拆分的颗粒度如何？</li><li>服务集群如何维护？</li><li>服务之间如何实现远程调度？</li><li>服务健康状态如何感知？</li></ul><h2 id="spring-cloud-和-spring-boot-的版本对应" tabindex="-1">spring cloud 和 spring boot 的版本对应 <a class="header-anchor" href="#spring-cloud-和-spring-boot-的版本对应" aria-label="Permalink to &quot;spring cloud 和 spring boot 的版本对应&quot;">​</a></h2><p>在创建 spring cloud 项目时，使用的 spring boot 版本必须与 spring cloud 对应</p><p>在 spring cloud 的官方文档中，<code>https://spring.io/projects/spring-cloud#learn</code>，选择对应版本的 <code>Reference Doc</code>，进入文档，在首页就会显示当前 spring cloud 版本和对应的 spring boot 版本</p><p>如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Release Train Version: 2025.0.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Supported Boot Version: 3.5.0</span></span></code></pre></div><h2 id="spring-cloud-相关框架" tabindex="-1">spring cloud 相关框架 <a class="header-anchor" href="#spring-cloud-相关框架" aria-label="Permalink to &quot;spring cloud 相关框架&quot;">​</a></h2><ul><li>maven: 自动化构建工具</li><li>spring boot: 每一个服务的最小运行单元</li><li>eureka/nacos: 服务注册中心</li><li>ribbon/feign: 服务调用框架</li><li>...</li></ul>`,31)]))}const h=l(p,[["render",n]]);export{g as __pageData,h as default};
