import{_ as i,c as a,a0 as t,o as p}from"./chunks/framework.UCJAoCzn.js";const n="/assets/1.CmbXIefQ.png",h="/assets/2.BI-366mZ.png",e="/assets/3.CcDwZMKy.png",y=JSON.parse('{"title":"盒模型","description":"","frontmatter":{},"headers":[],"relativePath":"css/css3-box.md","filePath":"css/css3-box.md"}'),l={name:"css/css3-box.md"};function k(d,s,r,o,c,E){return p(),a("div",null,s[0]||(s[0]=[t('<h1 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h1><p>盒模型是网页布局的基础，也是网页设计中一个重要的方面。盒模型决定了布局是否简洁，而布局的简洁程度决定了代码的复杂度。</p><h2 id="基础的盒模型" tabindex="-1">基础的盒模型 <a class="header-anchor" href="#基础的盒模型" aria-label="Permalink to &quot;基础的盒模型&quot;">​</a></h2><p>盒模型由几个方面组成，包括：<code>内容</code>、<code>内边距</code>、<code>边框</code>、<code>外边距</code>。</p><p><img src="'+n+'" alt="盒模型"></p><p><strong>盒空间</strong>：是盒内容 + 边框 + 内边距（这里不包含外边距，因为外边距在盒子外）</p><p><strong>盒子的整体宽度</strong> = width + border * 2 + padding * 2</p><p>可以看下面的例子，鼠标放在 <code>div</code> 上，画面显示的宽度是 <code>130px</code>，而显然它只计算了 内容宽度 + 边框 + 内边距（100 + 10 * 2 + 5 * 2） 的宽度，而没有计算 外边距的 3px。</p><p><img src="'+h+'" alt="盒空间"></p><p>获取和空间可以使用 <code>offsetWidth</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].offsetWidth</span></span></code></pre></div><h2 id="ie6混杂模式" tabindex="-1">IE6混杂模式 <a class="header-anchor" href="#ie6混杂模式" aria-label="Permalink to &quot;IE6混杂模式&quot;">​</a></h2><p>在IE6混杂模式中，设置设置盒子宽高直接囊括了 border 和 padding。</p><p>也就是说如果设置了 width 为 100px，那么内容、内边距、边框都会被囊括在这 100px 中。</p><p>width = 内容宽度 + 边框宽度 + 内边距宽度</p><p>内容宽度 = width - 边框宽度 - 内边距宽度</p><p><img src="'+e+`" alt="混杂模式盒空间"></p><h3 id="如何实现ie6混杂模式" tabindex="-1">如何实现IE6混杂模式 <a class="header-anchor" href="#如何实现ie6混杂模式" aria-label="Permalink to &quot;如何实现IE6混杂模式&quot;">​</a></h3><p>可以使用 <code>box-sizing: border-box; </code> 来在当前浏览器中实现混杂模式。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,20)]))}const F=i(l,[["render",k]]);export{y as __pageData,F as default};
