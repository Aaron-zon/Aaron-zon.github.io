import{_ as i,c as a,a0 as n,o as p}from"./chunks/framework.Db5sgsAJ.js";const g=JSON.parse('{"title":"什么是虚拟 DOM？","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"vue3/virtual-dom.md","filePath":"vue3/virtual-dom.md"}'),t={name:"vue3/virtual-dom.md"};function l(h,s,k,e,E,d){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="什么是虚拟-dom" tabindex="-1">什么是虚拟 DOM？ <a class="header-anchor" href="#什么是虚拟-dom" aria-label="Permalink to &quot;什么是虚拟 DOM？&quot;">​</a></h1><p>虚拟 DOM 是一种用于描述真实 DOM 的抽象语法树，它允许我们以一种声明式的方式来描述真实 DOM 的结构，从而实现对真实 DOM 的更新。</p><p>在 Vue 中，虚拟 DOM 是一个 JavaScript 对象，它描述了真实 DOM 的结构，包括标签名（tag）、属性（attrs）、子元素（children）等。当数据发生变化时，Vue 会根据虚拟 DOM 的变化来更新真实 DOM。</p><p>真实DOM结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;节点内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ foo }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>虚拟DOM：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            attrs: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                class: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;节点内容&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>创建 <code>虚拟DOM</code> 可以更好的控制页面视图的渲染，当触发响应式时，<code>diff算法</code> 会对比新旧虚拟DOM，得出需要修改的最小单位，从而在视图的更新时，实现减少 <code>dom</code> 操作，提高性能。</p><h2 id="为什么需要虚拟-dom" tabindex="-1">为什么需要虚拟 DOM ？ <a class="header-anchor" href="#为什么需要虚拟-dom" aria-label="Permalink to &quot;为什么需要虚拟 DOM ？&quot;">​</a></h2><p>操作 <code>DOM</code> 的代价是十分昂贵的，js 和 DOM 是两种东西，当使用 js 操作 DOM 时，需要两者交互。</p><p>操作DOM会导致重排和重绘。</p><h3 id="dom-和-js-的关系" tabindex="-1">Dom 和 js 的关系 <a class="header-anchor" href="#dom-和-js-的关系" aria-label="Permalink to &quot;Dom 和 js 的关系&quot;">​</a></h3><p>DOM 是独立于语言的，用于操作 xml 和 HTML 文档的程序接口，在浏览器中主要用于和 html 打交道。</p><p>而 js 是浏览器中用来调用接口的语言，它无法真正改变 DOM，而是通过使用 Dom API来访问 html文档中的数据。</p><p>在 IE</p>`,15)]))}const o=i(t,[["render",l]]);export{g as __pageData,o as default};
