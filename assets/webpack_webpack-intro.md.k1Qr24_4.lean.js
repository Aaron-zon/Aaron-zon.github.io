import{ax as e,A as t,aQ as p,z as i}from"./chunks/framework.BWRXlwpK.js";const o="/assets/image.BzhSZMmV.png",s="/assets/image-1.zdTXFLYS.png",n="/assets/image-2.CWtVLgdL.png",l="/assets/image-3.BOf39pi0.png",u=JSON.parse('{"title":"Webpack","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"webpack/webpack-intro.md","filePath":"webpack/webpack-intro.md"}'),r={name:"webpack/webpack-intro.md"};function c(d,a,g,h,k,b){return i(),t("div",null,a[0]||(a[0]=[p('<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><p>webpack 是一款基于模块化的打包工具，主要使用它来解决前端工程化、模块化产生的一些问题</p><h2 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h2><p>前端工程化是根据业务特点，将前端开发流程规范化，标准化，它包括 开发流程，技术选型，代码规范，构建发布等，用于提升前端工程师的开发效率吧和代码质量。</p><p>实现前端工程化的目的简单来说就是通过流程规范、自动化工具来提升前端的开发效率、性能、质量、多人协作以及开发体验。</p><p><strong>优点与目标：提升开发效率、性能、质量、多人协作以及开发体验</strong></p><p><strong>具体实现：开发流程规范化，标准化，包括【开发流程、技术选型、代码规范、构建发布等】</strong></p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><p>在前端模块化的概念中，模块是可复用的代码片段，代码片段分布在各个文件中，在使用时如同拼积木一样进行组合，从而实现功能。</p><p>它可以让代码片段复用，避免全局污染，提高代码的可维护性、可读性，但同时也带来了一些问题。</p><p><strong>模块化特点：</strong></p><ul><li>避免全局作用域污染：如果所有代码都写在一个文件中，变量和函数容易冲突。</li><li>提高代码可维护性：拆分成小模块后，更易于维护和扩展。</li><li>提高代码复用性：一个模块可以在多个项目或文件中使用。</li><li>提升开发效率：多人协作时，每个开发者可以专注于自己负责的模块。</li></ul><p><strong>模块化带来的一些问题：</strong></p><p>1.运行效率</p><p>精细的模块划分带来了更多的js文件，更多的Js文件带来了更多的请求，降低了页面访问效率。</p><p><img src="'+o+'" alt="alt text"></p><p>2.兼容性</p><p>浏览器目前仅支持ES6模块化标准，只能使用ES6的导入导出，无法使用commonJs或AMD的导入导入导出方式，因此如果引入的包如果是以非ES6模式进行的导出，在浏览器是用不了的。</p><p>例如 JQuery，由于它不止可以在浏览器环境使用，因此它的导出方式使用的是commonJs，无法在浏览器中直接引入。</p><p>3.工具问题：浏览器在导入时，不支持获取npm下载的第三方包</p><p><img src="'+s+'" alt="alt text"></p><p><img src="'+n+'" alt="alt text"></p><p>如图中，文件中引入了 <code>jquery</code>，在没有其他工具的帮助下，浏览器只支持 import 以 <code>/</code>、<code>./</code>、<code>../</code> 开头，无法左到不加地址符自动匹配到<code>node_modules</code>。</p><p><strong>以上模块化所产生的问题，仅仅是前端工程化的一个缩影，实际上的问题要更多</strong></p><p>当开发一个具有规模的程序时，你将遇到许许多多非业务相关的问题，如：<strong>执行效率、兼容性、代码可维护性、可拓展性、团队协作、测试</strong> 等。</p><p>我们将这些问题称之为工程问题。工程问题与业务无关。它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得缓慢，同时也让开发人员陷入技术的泥潭。</p><h3 id="为什么模块化的问题在node端没那么明显-而在浏览器端变得如此复杂" tabindex="-1">为什么模块化的问题在node端没那么明显，而在浏览器端变得如此复杂 <a class="header-anchor" href="#为什么模块化的问题在node端没那么明显-而在浏览器端变得如此复杂" aria-label="Permalink to &quot;为什么模块化的问题在node端没那么明显，而在浏览器端变得如此复杂&quot;">​</a></h3><p>1.在node端，运行的JS文件载本地，因此可以本地读取，他的运行效率要比浏览器远程传输文件快得多。</p><p>2.在浏览器端，开发时态和运行时态的侧重点不同</p><h3 id="工程开发的两个时机" tabindex="-1">工程开发的两个时机 <a class="header-anchor" href="#工程开发的两个时机" aria-label="Permalink to &quot;工程开发的两个时机&quot;">​</a></h3><p>1.开发时态（devtime）</p><ul><li>模块划分越细越好</li><li>支持多模块化标准</li><li>支持npm或其他包管理器下载模块</li><li>能够解决其他工程化问题</li></ul><p>2.运行时态（runtime）</p><ul><li>文件越少越好</li><li>文件体积越小越好</li><li>代码不可读越好</li><li>所有浏览器都要兼容</li><li>能供解决其他运行时的问题，主要是执行效率</li></ul><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。</p><p>这样的工具，叫 <strong>构建工具</strong>。</p><blockquote><p>devtime --&gt; 构建工具 --&gt; runtime</p></blockquote><p>这样以来，开发者就可以专注于开发时态的代码构建，而不用担心运行时态遇到的问题。</p><h2 id="webpack-特点" tabindex="-1">Webpack 特点 <a class="header-anchor" href="#webpack-特点" aria-label="Permalink to &quot;Webpack 特点&quot;">​</a></h2><ul><li><strong>为前端工程化而生</strong>：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给webpack来处理</li><li><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用webpack</li><li><strong>生态强大</strong>：webpack是非常灵活、可拓展的，webpack本身的功能并不多，但是它提供了一些可以扩展功能的机制，使得一些第三方库可以融于webpack中</li><li><strong>基于node开发</strong>：由于webpack在构建的过程中需要读取文件，因此它是运行在node环境中的</li><li><strong>基于模块化</strong>：webpack在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析，它支持各种模块化标准，包括但不限于CommonJS、ES6 Module</li></ul><h2 id="webpack-安装" tabindex="-1">Webpack 安装 <a class="header-anchor" href="#webpack-安装" aria-label="Permalink to &quot;Webpack 安装&quot;">​</a></h2><p>webpack 通过npm安装，它提供了两个包</p><ul><li>webpack：核心包，包含了 webpack构建过程中要用到的所有api</li><li>webpack-cli：提供了一个简单的cli命令，它调用了 webpack 核心包下的api，用来完成构建过程</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-cli</span></span></code></pre></div><p><code>npx webpack</code></p><p>使用这个命令webpack在默认情况下会读取src下文件进行打包，打包后会在工程的根目录生成dist文件夹存放打包后的文件,可以将这段命令写入package.json中方便管理</p><p><img src="'+l+'" alt="alt text"></p><p><strong>【&#39;mode&#39; option has not been set】？</strong></p><p>按照上面的方式打包，会出现这个红色字体，这是因为没有选择打包模式【开发模式/生产模式】,虽然出现了红色字体但是这时的打包依然是成功的，因为没有设置模式默认打出的包是生产模式。</p><p><strong>npx webpack --mode=development</strong>：开发模式打包</p><p><strong>npx webpack --mode=production</strong>：生产模式打包</p><h2 id="自动化构建工具实现的功能" tabindex="-1">自动化构建工具实现的功能 <a class="header-anchor" href="#自动化构建工具实现的功能" aria-label="Permalink to &quot;自动化构建工具实现的功能&quot;">​</a></h2><p>构建工具：将源代码转换成可以执行的JavaScript、CSS、HTML代码</p><p>构建工具其实就是 <strong>工程化、自动化</strong> 思想在前端开发中的体现，将一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。构建 <strong>为前端开发注入更大的活力，解放了我们的生产力</strong>。</p><p><strong>可实现的功能</strong></p><ul><li><strong>代码转换</strong>：例如将TypeScript编译成JavaScript、将SCSS编译成CSS</li><li><strong>文件优化</strong>：将JS、CSS、HTML代码进行压缩</li><li><strong>代码分割</strong>：提取多个文件中的公共代码，提取首屏不需要执行的部分代码让其异步加载</li><li><strong>模块合并</strong>：在采用模块化的项目中会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件</li><li><strong>自动刷新</strong>：监听本地源代码变化，自动重新构建、刷新浏览器</li><li><strong>代码校验</strong>：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过</li><li><strong>自动发布</strong>：更新代码后，自动构建出线上发布代码并传输到发布系统</li></ul>',57)]))}const w=e(r,[["render",c]]);export{u as __pageData,w as default};
