import{ax as e,A as s,aQ as n,z as t}from"./chunks/framework.BWRXlwpK.js";const b=JSON.parse('{"title":"Java 数据类型","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"java/java-type.md","filePath":"java/java-type.md"}'),i={name:"java/java-type.md"};function l(p,a,o,r,c,d){return t(),s("div",null,a[0]||(a[0]=[n(`<h1 id="java-数据类型" tabindex="-1">Java 数据类型 <a class="header-anchor" href="#java-数据类型" aria-label="Permalink to &quot;Java 数据类型&quot;">​</a></h1><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><ul><li>整形（4个）： <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>浮点型（2个）：<code>float</code>、<code>double</code></li><li>字符型（1个）：<code>char</code></li><li>布尔型（1个）：<code>boolean</code></li></ul><h3 id="byte-字节形" tabindex="-1">byte 字节形 <a class="header-anchor" href="#byte-字节形" aria-label="Permalink to &quot;byte 字节形&quot;">​</a></h3><p>1 byte = 8 bit（比特）</p><p>每个 <code>bit</code> 可以为 0 或 1，因此 <strong>8bit</strong> 共有 <strong>2的8次方</strong> 个变化，共 <strong>256</strong> 种组合。</p><p>0 0000000</p><p>byte 中用第一个bit位，记录符号的正负，0代表正数，1代表负数</p><p><strong>取值范围：[-128 ~ 127]（[-2的7次方 ~ 2的7次方 - 1]）</strong></p><h3 id="short" tabindex="-1">short <a class="header-anchor" href="#short" aria-label="Permalink to &quot;short&quot;">​</a></h3><p>1 short = 2 byte = 16 bit</p><p><strong>取值范围：[-32768 ~ 32767]</strong></p><h3 id="int" tabindex="-1">int <a class="header-anchor" href="#int" aria-label="Permalink to &quot;int&quot;">​</a></h3><p>1 int = 4 byte = 32 bit</p><p><strong>取值范围：【-2147483648 ~ 2147483647】</strong></p><h3 id="long" tabindex="-1">long <a class="header-anchor" href="#long" aria-label="Permalink to &quot;long&quot;">​</a></h3><p>1 long = 8 字节 = 64 bit</p><h3 id="float" tabindex="-1">float <a class="header-anchor" href="#float" aria-label="Permalink to &quot;float&quot;">​</a></h3><p>4 byte = 32 bit</p><p>0 000000000 0000...</p><p>第1bit位用来记录小数的正负，后9bit用来计算整数，再后的所有表示小数部分</p><h3 id="double" tabindex="-1">double <a class="header-anchor" href="#double" aria-label="Permalink to &quot;double&quot;">​</a></h3><p>8 byte = 64 bit</p><p>0 0000000000000000000 0000...</p><p>第 1bit 来记录小数的正负，后 19bit 用来计算整数，再后的所有表示小数部分</p><h3 id="char-字符型" tabindex="-1">char 字符型 <a class="header-anchor" href="#char-字符型" aria-label="Permalink to &quot;char 字符型&quot;">​</a></h3><p>1 char = 16 bit</p><h2 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h2><ul><li>数组（Array）：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int[] ns = { 1, 4, 6, 9 }</span></span></code></pre></div><ul><li>类（Class）: Class Test</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Class Test {</span></span>
<span class="line"><span>  int x;</span></span>
<span class="line"><span>  void pintX() {</span></span>
<span class="line"><span>    System.out.println(x);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>接口（interface）:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Printable {</span></span>
<span class="line"><span>  void print();</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>枚举（enum）:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>enum Clor {</span></span>
<span class="line"><span>  RED, GREEN, BLUE;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>注解（@interface）:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@interface MyAnnotation {</span></span>
<span class="line"><span>    String value();</span></span>
<span class="line"><span>    int count() default 0;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>...</li></ul>`,39)]))}const u=e(i,[["render",l]]);export{b as __pageData,u as default};
