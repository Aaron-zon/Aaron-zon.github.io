import{_ as a,c as o,a2 as t,o as r}from"./chunks/framework.BLTIpkzl.js";const c="/assets/image-4.BobBMZKz.png",n="/assets/image-5.QQYKfaG6.png",g=JSON.parse('{"title":"配置文件","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"webpack/webpack-config.md","filePath":"webpack/webpack-config.md"}'),p={name:"webpack/webpack-config.md"};function s(i,e,l,d,b,w){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h1><p>webpack 提供了许多参数，我们可以直接使用命令行来调用。</p><p>但为了 <strong>更加灵活、方便</strong> 的使用webpack，我们还可以引入 <strong>配置文件</strong>。</p><p><strong>注意：</strong> 如果 <strong>配置文件</strong> 和 <strong>命令行</strong> 发生了冲突，那么 <strong>以命令行为准</strong></p><h2 id="webpack配置文件写在哪里" tabindex="-1">webpack配置文件写在哪里？ <a class="header-anchor" href="#webpack配置文件写在哪里" aria-label="Permalink to &quot;webpack配置文件写在哪里？&quot;">​</a></h2><p>一般来说webpack的配置文件要放在根目录下，是一个js代码文件，命名为webpack.config.js。</p><p>这个文件名是可以改的但需要做一些配置（可以用命令行的--config来指定配置文件）</p><p><img src="'+c+'" alt="alt text"></p><h2 id="webpack配置文件中写什么" tabindex="-1">webpack配置文件中写什么？ <a class="header-anchor" href="#webpack配置文件中写什么" aria-label="Permalink to &quot;webpack配置文件中写什么？&quot;">​</a></h2><p>只要最终可以通过CommonJS模块导出一个对象，对象中的各种属性对应不同的webpack配置即可。</p><p><strong>注意：</strong> 只能是通过CommonJS导出，在这里es6的导出方式会报错，这是由于配置文件是在打包的过程中进行读取的，而打包的过程只能在node环境中进行，这时要由node读取配置文件中的内容。</p><h2 id="webpack基本配置" tabindex="-1">webpack基本配置 <a class="header-anchor" href="#webpack基本配置" aria-label="Permalink to &quot;webpack基本配置&quot;">​</a></h2><ul><li>mode：编译模式（字符串），取值为 <code>development</code> 或 <code>production</code>，指定编译结果运行的环境，回影响奥webpack对编译结果代码格式的处理。</li><li>entry：入口（字符串），指定入口文件（字符串路径）</li><li>output：出口（字符串），指定编译结果文件（字符串路径）</li></ul><p><img src="'+n+'" alt="alt text"></p><h3 id="其他配置" tabindex="-1">其他配置 <a class="header-anchor" href="#其他配置" aria-label="Permalink to &quot;其他配置&quot;">​</a></h3><ul><li>source map：开发环境中使用的一种调试手段，可以方便调试代码，但是会增加编译后的代码体积，所以生产环境中一般不启用。 <ul><li>具体配置文档：<a href="https://www.webpackjs.com/configuration/devtool/" target="_blank" rel="noreferrer">https://www.webpackjs.com/configuration/devtool/</a></li></ul></li><li>devServe.proxy：中转代理配置，前后端分离希望在同一域上发送 API 请求时使用 <ul><li>具体配置文档：<a href="https://www.webpackjs.com/configuration/dev-server/#devserverproxy" target="_blank" rel="noreferrer">https://www.webpackjs.com/configuration/dev-server/#devserverproxy</a></li></ul></li></ul>',16)]))}const h=a(p,[["render",s]]);export{g as __pageData,h as default};
